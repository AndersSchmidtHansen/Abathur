{"name":"Abathur","tagline":"Framework for crafting Polymer elements using Gulp, Sass, Coffeescript, Slim & BrowserSync","body":"Abathur\r\n=======\r\n\r\nFramework for crafting Polymer elements using Gulp, Sass, Coffeescript, Slim &amp; BrowserSync.\r\n\r\nBuild Polymer elements in the slickest way possible and have them zipped for distribution when you're done. And with BrowserSync you can even reload your element every time you make a change.\r\n\r\nVideo Demo\r\n----------------\r\n<a href=\"https://www.screenr.com/ngRN\" target=_BLANK>![](http://i61.tinypic.com/2mh7q0w.png)</a>\r\n\r\n\r\nUsage\r\n---------\r\n\r\nIn the following, I outline through an example how to get the most out of Abathur and what kind of workflow I usually follow.\r\n\r\n### Summoning Abathur\r\n\r\nTo install Abathur on your system, have Node / NPM installed beforehand along with Gulp and the Ruby gem `sass` (`$ gem install sass`). Then simply clone this repo to your system:\r\n\r\n```\r\n$ git clone git@github.com:AndersSchmidtHansen/Abathur.git Abathur\r\n```\r\nAfter that, run `$ npm install --save-dev` to install the node modules.\r\n\r\n### Adding a new Polymer element\r\n\r\nLet's add a Polymer element called \"paper-mario\" to Abathur...\r\n\r\n1. Run `$ gulp craft --element paper-mario`. This creates the folder \"paper-mario\" within the \"factory\" folder along with the necessary files `paper-mario.slim`, `paper-mario.scss` and `paper-mario.coffee`\r\n\r\n2. Start up Gulp with `$ gulp`. Your browser will open and BrowserSync should now be active as well, providing live reloading when you make any changes to the files within the \"paper-mario\" folder.\r\n\r\n3. Begin creating your \"paper-mario\" Polymer element, starting with \"paper-mario.slim\". For inspiration, refer to the included \"paper-tiger\" example Polymer element or go to [Polymer](http://polymer-project.org) for more.\r\n\r\nWhen you save for the first time, the compiled version of \"paper-mario\" will be created inside the \"elements\" folder.\r\n\r\n4. Import the \"paper-mario\" to the \"index.slim\" file, by following the included \"paper-tiger\" example. You can remove the \"paper-tiger\" import if you want afterwards.\r\n\r\n5. When satisfied with your element and when you've tested it across multiple browsers, devices and screen sizes (which [BrowserSync](www.browsersync.io) allows) it's time to pack it. Open a new tab in your terminal and type:\r\n\r\n`$ gulp pack --element paper-mario`\r\n\r\nThis will zip both the compiled and source versions of \"paper-mario\" into the \"distribution\" folder as `paper-mario__dist.zip` and `paper-mario__source.zip`.\r\n\r\n6. **Optional**: If you want to remove the zipped files you can also run ` $ gulp trash --element paper-mario` (or of course, just delete it manually).\r\n\r\n### Available Gulp commands\r\n\r\nQuick-create a new Polymer element:\r\n```\r\n$ gulp craft --element your-element-name\r\n```\r\n\r\nCompile all Polymer elements:\r\n```\r\n$ gulp synthesize\r\n```\r\n\r\nPack an existing Polymer element as a .zip-file:\r\n```\r\n$ gulp pack --element your-element-name\r\n```\r\n\r\nRemove an existing Polymer element from \"distribution\" folder:\r\n```\r\n$ gulp trash --element your-element-name\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}